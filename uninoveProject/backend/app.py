from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import datetime

app = Flask(__name__)
CORS(app)

DB_PATH = 'unismart.db'

def buscar_resposta(pergunta):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT resposta FROM faq WHERE pergunta LIKE ?", ('%' + pergunta + '%',))
    resultado = cursor.fetchone()
    conn.close()
    return resultado[0] if resultado else None

def buscar_preco_por_nome(nome_servico):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT nome, preco FROM servicos WHERE LOWER(nome) = LOWER(?)", (nome_servico,))
    resultado = cursor.fetchone()
    conn.close()
    return resultado

def listar_servicos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT nome FROM servicos")
    servicos = cursor.fetchall()
    conn.close()
    return [s[0] for s in servicos]

def listar_precos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT nome, preco FROM servicos")
    servicos = cursor.fetchall()
    conn.close()
    return servicos

def salvar_avaliacao(nota):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS avaliacoes (id INTEGER PRIMARY KEY AUTOINCREMENT, nota INTEGER NOT NULL, data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP)')
    cursor.execute("INSERT INTO avaliacoes (nota) VALUES (?)", (nota,))
    conn.commit()
    conn.close()

@app.route('/chat', methods=['POST'])
def chat():
    data = request.get_json()
    mensagem = data.get('message', '').strip()
    mensagem_lower = mensagem.lower()

    # comandos exatos 'especificamente''
    if mensagem_lower in ['servi√ßos', 'ver servi√ßos', 'lista de servi√ßos', 'quais servi√ßos']:
        servicos = listar_servicos()
        reply = "Aqui est√£o os servi√ßos dispon√≠veis:\n" + "\n".join(f"- {s}" for s in servicos)
        reply += "\n\nDigite o nome do servi√ßo para saber o pre√ßo, ou digite 'menu' para outras op√ß√µes."
        return jsonify({'reply': reply})

    if mensagem_lower.startswith('pre√ßo') or mensagem_lower.startswith('quanto custa') or mensagem_lower.startswith('quanto √©'):
        servicos = listar_precos()
        for nome, preco in servicos:
            if nome.lower() in mensagem_lower:
                return jsonify({'reply': f"O pre√ßo do servi√ßo '{nome}' √© R$ {preco:.2f}"})
        return jsonify({'reply': "Qual servi√ßo voc√™ gostaria de saber o pre√ßo? Digite o nome do servi√ßo."})

    # Verifica se a mensagem enviada √© a info/nome exato de algum servi√ßo
    preco_servico = buscar_preco_por_nome(mensagem)
    if preco_servico:
        nome, preco = preco_servico
        return jsonify({'reply': f"O pre√ßo do servi√ßo '{nome}' √© R$ {preco:.2f}"})

    if mensagem.isdigit() and 1 <= int(mensagem) <= 5:
        salvar_avaliacao(int(mensagem))
        mensagens = {
            1: "Sentimos muito pela sua experi√™ncia. Vamos melhorar!",
            2: "Lamentamos n√£o ter atingido suas expectativas. Obrigado pelo feedback.",
            3: "Agradecemos sua avalia√ß√£o. Estamos sempre buscando melhorar!",
            4: "Muito obrigado! Ficamos felizes que tenha gostado.",
            5: "üòç Uau! Agradecemos imensamente sua avalia√ß√£o m√°xima!"
        }
        return jsonify({'reply': mensagens[int(mensagem)]})

    if mensagem_lower in ['avalia√ß√£o', 'avaliar', 'avaliar atendimento']:
        reply = "Por favor, avalie nosso atendimento de 1 (p√©ssimo) a 5 (excelente)."
        return jsonify({'reply': reply})

    if mensagem_lower in ['menu', 'op√ß√µes', 'opcao', 'op√ß√µes do menu']:
        reply = ("Menu de op√ß√µes:\n"
                 "- servi√ßos: ver lista de servi√ßos\n"
                 "- pre√ßos: saber pre√ßos dos servi√ßos\n"
                 "- avalia√ß√£o: avaliar atendimento\n"
                 "- fun√ß√µes: saber o que o chatbot faz\n")
        return jsonify({'reply': reply})

    if mensagem_lower in ['fun√ß√µes', 'o que voc√™ faz?', 'o que voc√™ faz']:
        resposta = buscar_resposta("o que voc√™ faz?")
        if resposta:
            return jsonify({'reply': resposta})

    # Consultar o FAQ geral
    resposta = buscar_resposta(mensagem_lower)
    if resposta:
        return jsonify({'reply': resposta})

    # Retorna isso caso algo n√£o seja encontrado
    return jsonify({'reply': "Desculpe, n√£o entendi. Digite 'menu' para ver as op√ß√µes dispon√≠veis."})

if __name__ == '__main__':
    app.run(debug=True)
